wb = xlsx_package.workbook
style_shout = wb.styles.add_style sz: 10, b: true, alignment: { horizontal: :center, vertical: :center }
style_center = wb.styles.add_style sz: 10, alignment: { horizontal: :center, vertical: :center }
style_vertical = wb.styles.add_style sz: 8, alignment: { text_rotation: 90, horizontal: :center, vertical: :bottom, wrap_text: true }
def num_to_letter(num)
  return 'a' if num.zero? || num == 1
  num -= 1
  array = num.divmod 26
  unless array[0].zero?
    column = num_to_letter(array[0])
  else
    column = ''
  end
  column << (97 + array[1]).chr.capitalize
end

def fetch_group(faculty, form =  nil, course = nil)
  groups = Group.joins(:students).where("student_group.student_group_status = #{Student::STATUS_STUDENT} AND group_active = 1").group(:group_speciality)
                .order('group_form ASC, group_name ASC, group_course ASC, group_number ASC')
                .joins(:speciality).where("speciality_faculty = #{faculty}")
  if form
    groups = groups.where(form: form)
  end
  if course
    groups = groups.where("group_course = #{course}")
  end
  return [groups.where('student_group.student_group_tax = 1').count, groups.where('student_group.student_group_tax = 2').count]
end

# Эксперименты с отчётами по контингенту

# очная, очно-заочная, заочная формы
  #  line_1 = ['Курс', '']
  #  line_2 = ['', '']
  #  lines = []
  #  Department.includes(:specialities).faculties.each do |f|
  #    line_1 << f.abbreviation
  #    f.specialities.each do |s|
  #      line_2 << s.full_name
  #    end
  #  end
  #
  #  worksheets = []
  #    lines = []
  #  [['очная', '101'], ['очно-заочная', '102'], ['заочная', '103']].each_with_index do |form, index|
  #    lines[index] = []
  #    [1,2,3,4,5,6].each do |course|
  #      ['б', 'к'].each do |budget|
  #        lines[index] << [course, budget]
  #      end
  #    end
  #  end
  #  Department.includes(:specialities).faculties.each do |f|
  #    f.specialities.each_with_index do |s, index|
  #      [1,2,3,4,5,6].each do |course|
  #        [[Student::PAYMENT_BUDGET, 'б'], [Student::PAYMENT_OFF_BUDGET, 'к']].each do |budget|
  #          [['очная', 101], ['очно-заочная', 102], ['заочная', 103]].each_with_index do |form, i|
  #            lines[i][(course-1)*2+(budget[0]%2)] << Student.unscoped.valid_student.filter(speciality: s, course: course, finance: budget[0], form: form[1]).length
  #          end
  #        end
  #      end
  #    end
  #  end
  #
  #[['очная', 101], ['очно-заочная', 102], ['заочная', 103]].each_with_index do |form, i|
  #  worksheets << [form[0], lines[i]]
  #end
  #
  #
  #worksheets.each do |wh|
  #  wb.add_worksheet(name: "#{wh[0]}") do |sheet|
  #    sheet.add_row line_1
  #    sheet.merge_cells("A1:A2")
  #    sheet.merge_cells("B1:B2")
  #    sheet.add_row line_2
  #    wh[1].each do |l|
  #      sheet.add_row l
  #    end
  #    #sheet["A1:J3"].each do |cell|
  #    #  cell.style = style_shout
  #    #end
  #
  #  end
  #end


# Магистратура
#line_1 = ['Курс', '']
#line_2 = ['', '']
#lines = []
#Department.includes(:specialities).faculties.each do |f|
#  line_1 << f.abbreviation
#  f.specialities.masters.each do |s|
#    line_2 << s.full_name
#  end
#end
#
#lines = []
#[1,2].each do |course|
#  ['б', 'к'].each do |budget|
#    lines << [course, budget]
#  end
#end
#
#Department.includes(:specialities).faculties.each do |f|
#  f.specialities.masters.each_with_index do |s, index|
#    [1,2].each do |course|
#      [[Student::PAYMENT_BUDGET, 'б'], [Student::PAYMENT_OFF_BUDGET, 'к']].each do |budget|
#        lines[(course-1)*2+(budget[0]%2)] << Student.unscoped.valid_student.filter(speciality: s, course: course, finance: budget[0]).length
#      end
#    end
#  end
#end
#
#wb.add_worksheet(name: 'магистры') do |sheet|
#  sheet.add_row line_1
#  sheet.merge_cells("A1:A2")
#  sheet.merge_cells("B1:B2")
#  sheet.add_row line_2
#  lines.each do |line|
#    sheet.add_row line
#  end
#end

# Дистанционное
#line_1 = ['Курс', '']
#line_2 = ['', '']
#lines = []
#Department.includes(:specialities).faculties.each do |f|
#  line_1 << f.abbreviation
#  f.specialities.each do |s|
#    line_2 << s.full_name
#  end
#end
#
#lines = []
#[1,2,3,4,5,6].each do |course|
#  lines << [course, '']
#end
#
#Department.includes(:specialities).faculties.each do |f|
#  f.specialities.each do |s|
#    [1,2,3,4,5,6].each do |course|
#      lines[(course-1)] << Student.unscoped.valid_student.filter(speciality: s, course: course, form: Group::FORM_DISTANCE).length
#    end
#  end
#end
#
#wb.add_worksheet(name: 'дистанционное') do |sheet|
#  sheet.add_row line_1
#  sheet.merge_cells("A1:A2")
#  sheet.merge_cells("B1:B2")
#  sheet.add_row line_2
#  lines.each do |line|
#    sheet.add_row line
#  end
#end

# Второе высшее


  #worksheets = []
  #lines = []
  #[['очная', '101'], ['очно-заочная', '102'], ['заочная', '103']].each_with_index do |form, index|
  #  lines[index] = []
  #  [1,2,3,4,5,6,'Всего'].each do |course|
  #    ['б', 'к'].each do |budget|
  #      lines[index] << [course, budget]
  #    end
  #  end
  #  lines[index] << ['Итого', '']
  #  lines[index] << ['По ф-ту', 'б']
  #  lines[index] << ['По ф-ту', 'к']
  #  lines[index] << ['Итого', '']
  #end
  #Department.includes(:specialities).faculties.each do |f|
  #  f.specialities.each_with_index do |s, index|
  #    [1,2,3,4,5,6,'all'].each do |course|
  #      [[Student::PAYMENT_BUDGET, 'б'], [Student::PAYMENT_OFF_BUDGET, 'к']].each do |budget|
  #        [['очная', 101], ['очно-заочная', 102], ['заочная', 103]].each_with_index do |form, i|
  #          if course == 'all'
  #            lines[i][12+(budget[0]%2)] << Student.unscoped.second_higher.valid_student.filter(speciality: s, finance: budget[0], form: form[1]).length
  #          else
  #            lines[i][(course-1)*2+(budget[0]%2)] << Student.unscoped.second_higher.valid_student.filter(speciality: s, course: course, finance: budget[0], form: form[1]).length
  #          end
  #        end
  #      end
  #    end
  #    [['очная', 101], ['очно-заочная', 102], ['заочная', 103]].each_with_index do |form, i|
  #      lines[i][14] << Student.unscoped.second_higher.valid_student.filter(speciality: s, form: form[1]).length
  #      [[Student::PAYMENT_BUDGET, 'б'], [Student::PAYMENT_OFF_BUDGET, 'к']].each do |budget|
  #        lines[i][15 + (budget[0]%2)] << (s == f.specialities.first ? Student.unscoped.second_higher.valid_student.filter(faculty: f, finance: budget[0], form: form[1]).length : '')
  #      end
  #      lines[i][17] << (s == f.specialities.first ? Student.unscoped.second_higher.valid_student.filter(faculty: f, form: form[1]).length : '')
  #    end
  #  end
  #end

#[['очная (второе высшее)', 101], ['очно-заочная (второе высшее)', 102], ['заочная (второе высшее)', 103]].each_with_index do |form, i|
#  worksheets << [form[0], lines[i]]
#end


# Новая версия
line_1 = ['Курс', '']
line_2 = ['', '']
Department.includes(:specialities).faculties.each do |f|
  f.specialities.not_masters.each do |s|
    line_1 << (s == f.specialities.not_masters.first ? f.abbreviation : '')
    line_2 << s.full_name
  end
end

[['все формы', 0],['очная', 101], ['очно-заочная', 102], ['заочная', 103]].each do |form|
  wb.add_worksheet(name: "#{form[0]}") do |sheet|
    sheet.add_row line_1, style: style_shout
    sheet.merge_cells('A1:A2')
    sheet.merge_cells('B1:B2')
    sheet.add_row line_2, style: style_vertical, height: 350
    sheet.column_widths 3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
    #sheet["C2:#{num_to_letter(all_specialities-1)}2"].each do |cell|
    #  cell.style = style_vertical
    #end
    #wh[1].each do |l|
    #  sheet.add_row l, style: style_center
    #end
    array_all_b = [0,0,0,0]
    array_all_k = [0,0,0,0]
    [1,2,3,4,5,6,'all'].each do |course|
      row_b = [course, 'б']
      row_u = [course, 'к']
      row_all = ['всего', '']
      row_all_b = ['', '']
      row_all_k = ['', '']
      Department.faculties.each_with_index do |f, index|
        if course == 'all'
          if form[1] == 0
          number = fetch_group(f.id)
          else
            number = fetch_group(f.id, form[1])
          end
        else
          if form[1] == 0
            number = fetch_group(f.id, nil, course)
          else
            number = fetch_group(f.id, form[1])
          end
        end
        f.specialities.not_masters.each do |s|
          row_b << (number[0][s.id] ? number[0][s.id] : 0)
          array_all_b[index] += (number[0][s.id] ? number[0][s.id] : 0) if course != 'all'
          row_u << (number[1][s.id] ?  number[1][s.id] : 0)
          array_all_k[index] += (number[1][s.id] ? number[1][s.id] : 0) if course != 'all'
          if course == 'all'
            row_all_b << (s == f.specialities.not_masters.first ? array_all_b[index] : 0 )
            row_all_k << (s == f.specialities.not_masters.first ? array_all_k[index] : 0 )
          end
        end
      end
      sheet.add_row row_b, style: style_center
      sheet.add_row row_u, style: style_center
      if course == 'all'
        sheet.add_row [row_b, row_u].transpose.map{|a| a.sum}, style: style_center
        sheet.add_row row_all_b, style: style_center
        sheet.add_row row_all_k, style: style_center
        sheet.add_row [row_all_b, row_all_k].transpose.map{|a| a.sum}, style: style_center
      end
    end
    start = 3
    all_specialities = 0
    Department.faculties.each_with_index do |faculty, index|
      specialities = faculty.specialities.not_masters.length
      all_specialities += specialities
      sheet.merge_cells("#{num_to_letter(start)}1:#{num_to_letter(start+specialities-1)}1")
      sheet.merge_cells("#{num_to_letter(start)}18:#{num_to_letter(start+specialities-1)}18")
      sheet.merge_cells("#{num_to_letter(start)}19:#{num_to_letter(start+specialities-1)}19")
      sheet.merge_cells("#{num_to_letter(start)}20:#{num_to_letter(start+specialities-1)}20")
      start += specialities
    end


    #sheet["A1:J3"].each do |cell|
    #  cell.style = style_shout
    #end

  end
end



